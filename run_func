<?php
// Database connection details
$host = 'localhost';
$dbname = 'voiture';
$user = 'root';
$pass = '';

// Create a new PDO instance
try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $user, $pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Fetch data from the SQL table
try {
    $query = "SELECT * FROM co2_emissions_car__1_";
    $stmt = $pdo->query($query);
    $data = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    die("Data fetching failed: " . $e->getMessage());
}

// Convert the data to JSON format
$jsonData = json_encode($data);
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CO2 Emissions Analysis</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <h1>CO2 Emissions Analysis</h1>

        <!-- Car Selection Form -->
        <form id="car-selection-form">
            <div class="mb-3">
                <label for="make-select" class="form-label">Select Make:</label>
                <select id="make-select" class="form-select" required>
                    <option value="">Choose...</option>
                </select>
            </div>
            <div class="mb-3">
                <label for="model-select" class="form-label">Select Model:</label>
                <select id="model-select" class="form-select" required>
                    <option value="">Choose...</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Show Plots</button>
        </form>

        <!-- Bubble Chart -->
        <div id="bubble-chart"></div>

        <!-- Heatmap Plot -->
        <div id="heatmap-plot"></div>
    </div>

    <script>
        // Get the JSON data from PHP
        const data = <?php echo $jsonData; ?>;

        // Function to update plots based on selected make and model
        function updatePlots(make, model) {
            let filteredData;
            if (make && model) {
                filteredData = data.filter(d => d['Make'] === make && d['Model'] === model);
            } else {
                filteredData = data;
            }

            const bubbleData = filteredData.map(d => ({
                x: parseFloat(d['Fuel Consumption Comb (L/100 km)']),
                y: parseFloat(d['Engine Size(L)']),
                r: parseFloat(d['CO2 Emissions(g/km)']) / 10, // Adjust the size of the bubbles
                co2: parseFloat(d['CO2 Emissions(g/km)']),
                Make: d['Make'],
                Model: d['Model']
            }));

            // Create bubble chart using Plotly
            const bubbleTrace = {
                x: bubbleData.map(d => d.x),
                y: bubbleData.map(d => d.y),
                text: bubbleData.map(d => `${d.Make} ${d.Model}`),
                mode: 'markers',
                marker: {
                    size: bubbleData.map(d => d.r),
                    sizemode: 'area',
                    sizeref: 2.0 * Math.max(...bubbleData.map(d => d.r)) / (60 ** 2), // Adjust the sizeref for better visibility
                    color: bubbleData.map(d => d.co2), // Color the bubbles based on CO2 emissions
                    colorscale: 'RdYlGn', // Choose a color scale (red for high emissions, green for low emissions)
                    reversescale: true,
                    colorbar: {
                        title: 'CO2 Emissions<br>(g/km)',
                        len: 0.8,
                        thickness: 20,
                        x: 1,
                        xanchor: 'right',
                        outlinewidth: 1
                    }
                },
                hovertemplate: '%{text}<br>Fuel Consumption: %{x} L/100km<br>Engine Size: %{y} L<br>CO2 Emissions: %{marker.color} g/km'
            };

            const bubbleLayout = {
                title: make && model ? `Fuel Consumption vs Engine Size (Bubble Color: CO2 Emissions) for ${make} ${model}` : 'Fuel Consumption vs Engine Size (Bubble Color: CO2 Emissions) for All Cars',
                xaxis: { title: 'Fuel Consumption (L/100km)' },
                yaxis: { title: 'Engine Size (L)' },
                showlegend: false,
                height: 600
            };

            Plotly.newPlot('bubble-chart', [bubbleTrace], bubbleLayout);

            // Create heatmap plot using Plotly
            const numericData = filteredData.map(d => ({
                'Engine Size(L)': parseFloat(d['Engine Size(L)']),
                'Cylinders': parseInt(d['Cylinders']),
                'Fuel Consumption Comb (L/100 km)': parseFloat(d['Fuel Consumption Comb (L/100 km)']),
                'CO2 Emissions(g/km)': parseFloat(d['CO2 Emissions(g/km)'])
            }));

            const correlationMatrix = calculateCorrelationMatrix(numericData);

            const heatmapData = [{
                z: correlationMatrix,
                x: Object.keys(numericData[0]),
                y: Object.keys(numericData[0]),
                type: 'heatmap',
                hoverongaps: false
            }];

            const heatmapLayout = {
                title: make && model ? `Heatmap of Feature Correlations for ${make} ${model}` : 'Heatmap of Feature Correlations for All Cars',
            };

            Plotly.newPlot('heatmap-plot', heatmapData, heatmapLayout);
        }

        // Function to calculate the correlation matrix
        function calculateCorrelationMatrix(data) {
            const features = Object.keys(data[0]);
            const correlationMatrix = [];

            for (let i = 0; i < features.length; i++) {
                const row = [];
                for (let j = 0; j < features.length; j++) {
                    const x = data.map(d => d[features[i]]);
                    const y = data.map(d => d[features[j]]);
                    const correlation = calculateCorrelation(x, y);
                    row.push(correlation);
                }
                correlationMatrix.push(row);
            }

            return correlationMatrix;
        }

        // Function to calculate the correlation coefficient
        function calculateCorrelation(x, y) {
            const n = x.length;
            const sumX = x.reduce((sum, value) => sum + value, 0);
            const sumY = y.reduce((sum, value) => sum + value, 0);
            const sumXY = x.reduce((sum, value, index) => sum + value * y[index], 0);
            const sumX2 = x.reduce((sum, value) => sum + value ** 2, 0);
            const sumY2 = y.reduce((sum, value) => sum + value ** 2, 0);

            const numerator = n * sumXY - sumX * sumY;
            const denominator = Math.sqrt((n * sumX2 - sumX ** 2) * (n * sumY2 - sumY ** 2));

            return numerator / denominator;
        }

        // Populate make select options
        const makeSelect = document.getElementById('make-select');
        const uniqueMakes = [...new Set(data.map(d => d['Make']))];
        uniqueMakes.forEach(make => {
            const option = document.createElement('option');
            option.value = make;
            option.textContent = make;
            makeSelect.appendChild(option);
        });

        // Populate model select options based on selected make
        const modelSelect = document.getElementById('model-select');
        makeSelect.addEventListener('change', () => {
            const selectedMake = makeSelect.value;
            modelSelect.innerHTML = '<option value="">Choose...</option>';
            if (selectedMake) {
                const models = data.filter(d => d['Make'] === selectedMake).map(d => d['Model']);
                models.forEach(model => {
                    const option = document.createElement('option');
                    option.value = model;
                    option.textContent = model;
                    modelSelect.appendChild(option);
                });
            }
        });

        // Handle form submission
        const form = document.getElementById('car-selection-form');
        form.addEventListener('submit', (event) => {
            event.preventDefault();
            const selectedMake = makeSelect.value;
            const selectedModel = modelSelect.value;
            updatePlots(selectedMake, selectedModel);
        });

        // Initial plot rendering for all cars
        updatePlots();
    </script>
</body>
</html>
