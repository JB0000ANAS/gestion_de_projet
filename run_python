<?php

require 'db.php';


$query = "SELECT * FROM co2_emissions_car__1_";
$result = $conn->query($query);

// data to JSON
$data = [];
while ($row = $result->fetch_assoc()) {
    $data[] = $row;
}
$jsonData = json_encode($data);
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CO2 Emissions Analysis</title>
    <!-- Include necessary CSS and JavaScript libraries -->
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <h1>CO2 Emissions Analysis</h1>

   
        <div id="scatter-matrix-plot"></div>

       
        <div id="heatmap-plot"></div>

    
        <div id="car-selection-widget">
            <label for="make-dropdown">Make:</label>
            <select id="make-dropdown"></select>
            <label for="model-dropdown">Model:</label>
            <select id="model-dropdown"></select>
        </div>

       
        <div id="prediction-widget">
            <label for="engine-size-widget">Engine Size (L):</label>
            <input type="number" id="engine-size-widget" min="1.0" max="6.0" step="0.1" value="2.0">

            <label for="cylinders-widget">Cylinders:</label>
            <input type="number" id="cylinders-widget" min="1" max="12" step="1" value="4">

            <label for="fuel-consumption-widget">Fuel Consumption Comb (L/100 km):</label>
            <input type="number" id="fuel-consumption-widget" min="3.0" max="20.0" step="0.1" value="7.0">

            <button id="predict-button">Predict Score</button>
            <div id="prediction-output"></div>
        </div>
    </div>

    <script>

        const data = <?php echo $jsonData; ?>;

    
        const X = data.map(d => [parseFloat(d['Engine Size(L)']), parseInt(d['Cylinders']), parseFloat(d['Fuel Consumption Comb (L/100 km)'])]);
        const y = data.map(d => parseFloat(d['CO2 Emissions(g/km)']));

        const model = new RandomForestRegressor(100, 42);
        model.fit(X, y);

        function updatePlots(make, model) {
            const filteredData = data.filter(d => d['Make'] === make && d['Model'] === model);
            const numericData = filteredData.map(d => ({
                'Engine Size(L)': parseFloat(d['Engine Size(L)']),
                'Cylinders': parseInt(d['Cylinders']),
                'Fuel Consumption Comb (L/100 km)': parseFloat(d['Fuel Consumption Comb (L/100 km)']),
                'CO2 Emissions(g/km)': parseFloat(d['CO2 Emissions(g/km)'])
            }));

            const scatterData = Object.keys(numericData[0]).map(key => ({
                x: numericData.map(d => d[key]),
                y: numericData.map(d => d['CO2 Emissions(g/km)']),
                mode: 'markers',
                name: key
            }));

            const scatterLayout = {
                title: `Scatter Matrix for ${make} ${model}`,
            };

            Plotly.newPlot('scatter-matrix-plot', scatterData, scatterLayout);

          
            const correlationMatrix = calculateCorrelationMatrix(numericData);

            const heatmapData = [{
                z: correlationMatrix,
                x: Object.keys(numericData[0]),
                y: Object.keys(numericData[0]),
                type: 'heatmap',
                hoverongaps: false
            }];

            const heatmapLayout = {
                title: `Heatmap of Feature Correlations for ${make} ${model}`,
            };

            Plotly.newPlot('heatmap-plot', heatmapData, heatmapLayout);
        }


        function handleCarSelection() {
            const make = makeDropdown.value;
            const model = modelDropdown.value;
            updatePlots(make, model);
        }


        function calculateCorrelationMatrix(data) {
            const features = Object.keys(data[0]);
            const correlationMatrix = [];

            for (let i = 0; i < features.length; i++) {
                const row = [];
                for (let j = 0; j < features.length; j++) {
                    const x = data.map(d => d[features[i]]);
                    const y = data.map(d => d[features[j]]);
                    const correlation = calculateCorrelation(x, y);
                    row.push(correlation);
                }
                correlationMatrix.push(row);
            }

            return correlationMatrix;
        }


        function calculateCorrelation(x, y) {
            const n = x.length;
            const sumX = x.reduce((sum, value) => sum + value, 0);
            const sumY = y.reduce((sum, value) => sum + value, 0);
            const sumXY = x.reduce((sum, value, index) => sum + value * y[index], 0);
            const sumX2 = x.reduce((sum, value) => sum + value ** 2, 0);
            const sumY2 = y.reduce((sum, value) => sum + value ** 2, 0);

            const numerator = n * sumXY - sumX * sumY;
            const denominator = Math.sqrt((n * sumX2 - sumX ** 2) * (n * sumY2 - sumY ** 2));

            return numerator / denominator;
        }

      
        function calculateScore(emissions) {
            if (emissions <= 100) {
                return 100;
            } else if (emissions <= 150) {
                return 90;
            } else if (emissions <= 200) {
                return 80;
            } else if (emissions <= 250) {
                return 70;
            } else if (emissions <= 300) {
                return 60;
            } else {
                return 50;
            }
        }

      
        function performPrediction() {
            const engineSize = parseFloat(engineSizeWidget.value);
            const cylinders = parseInt(cylindersWidget.value);
            const fuelConsumption = parseFloat(fuelConsumptionWidget.value);

            const predictedEmissions = model.predict([[engineSize, cylinders, fuelConsumption]])[0];
            const score = calculateScore(predictedEmissions);

            const outputElement = document.getElementById('prediction-output');
            outputElement.innerHTML = `
                <p>Predicted CO2 Emissions: ${predictedEmissions.toFixed(2)} g/km</p>
                <p>Predicted Environmental Score: ${score}</p>
            `;
        }

        
        const makeDropdown = document.getElementById('make-dropdown');
        const modelDropdown = document.getElementById('model-dropdown');
        const engineSizeWidget = document.getElementById('engine-size-widget');
        const cylindersWidget = document.getElementById('cylinders-widget');
        const fuelConsumptionWidget = document.getElementById('fuel-consumption-widget');
        const predictButton = document.getElementById('predict-button');

    
        const makeOptions = [...new Set(data.map(d => d['Make']))];
        makeOptions.forEach(make => {
            const option = document.createElement('option');
            option.value = make;
            option.text = make;
            makeDropdown.appendChild(option);
        });

      
        makeDropdown.addEventListener('change', () => {
            const selectedMake = makeDropdown.value;
            const modelOptions = data.filter(d => d['Make'] === selectedMake).map(d => d['Model']);
            modelDropdown.innerHTML = '';
            modelOptions.forEach(model => {
                const option = document.createElement('option');
                option.value = model;
                option.text = model;
                modelDropdown.appendChild(option);
            });
            handleCarSelection();
        });

        predictButton.addEventListener('click', performPrediction);

        
        handleCarSelection();
    </script>
</body>
</html>
